// set the game's resolution to 64x32
namespace userconfig {
    export const ARCADE_SCREEN_WIDTH = 64;
    export const ARCADE_SCREEN_HEIGHT = 32;
}

// stack - since this is javascript it will just be a list of numbers
let stack: number[] = []

// general purpose registers v0-vf
let v: number[] = [];
for (let j = 0; j < 16; j++) {
    v[j] = 0
}

// 4096 bytes (4kb) of memory
let memory: number[] = [];
for (let j = 0; j < 4096; j++) {
    memory[j] = 0;
}

// program counter
let pc = 0x200
// index register
let i = 0

// load the default font at hex 050 (dec 80)
let fontBytes = [0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];
let fontOffset = 0x50;
for (let j = 0; j < fontBytes.length; j++) {
    memory[fontOffset + j] = fontBytes[j];
}

const data: number[] = [
    // Offset 0x00000000 to 0x00000390
    0x13, 0x0C, 0x60, 0x00, 0xE0, 0xA1, 0x12, 0x04, 0x70, 0x01, 0x40, 0x10,
    0x00, 0xEE, 0x12, 0x04, 0x65, 0x00, 0xA2, 0x22, 0xF1, 0x55, 0xA2, 0x82,
    0xF1, 0x55, 0x12, 0x22, 0x43, 0x01, 0xD0, 0x12, 0x22, 0x02, 0x00, 0x00,
    0xF5, 0x1E, 0xF5, 0x1E, 0xF5, 0x1E, 0xF5, 0x1E, 0xF1, 0x65, 0x63, 0x00,
    0xF3, 0x15, 0xF4, 0x07, 0x34, 0x00, 0x12, 0x44, 0xA4, 0x23, 0xD0, 0x12,
    0x64, 0x0A, 0xF4, 0x15, 0x64, 0x01, 0x83, 0x43, 0x64, 0x0E, 0xE4, 0x9E,
    0x12, 0x52, 0x45, 0x00, 0x12, 0x52, 0x75, 0xFF, 0x12, 0x1C, 0x64, 0x0F,
    0xE4, 0x9E, 0x12, 0x60, 0x95, 0x20, 0x12, 0x60, 0x75, 0x01, 0x12, 0x1C,
    0x86, 0x50, 0x64, 0x0A, 0xE4, 0xA1, 0x12, 0x80, 0x64, 0x00, 0x72, 0x01,
    0x74, 0x01, 0xE4, 0x9E, 0x12, 0x78, 0x86, 0x40, 0x76, 0xFF, 0x12, 0x80,
    0x54, 0x20, 0x12, 0x6C, 0x72, 0xFF, 0x12, 0x32, 0x22, 0x02, 0x00, 0x00,
    0xF6, 0x1E, 0xF6, 0x1E, 0xF6, 0x1E, 0xF6, 0x1E, 0x64, 0x02, 0xF4, 0x1E,
    0xF1, 0x65, 0x64, 0x10, 0x80, 0x41, 0xA2, 0x9A, 0xF1, 0x55, 0x00, 0x00,
    0xFC, 0x65, 0x23, 0x02, 0x41, 0x00, 0x00, 0xEE, 0x80, 0x10, 0x23, 0x02,
    0x42, 0x00, 0x00, 0xEE, 0x80, 0x20, 0x23, 0x02, 0x43, 0x00, 0x00, 0xEE,
    0x80, 0x30, 0x23, 0x02, 0x44, 0x00, 0x00, 0xEE, 0x80, 0x40, 0x23, 0x02,
    0x45, 0x00, 0x00, 0xEE, 0x80, 0x50, 0x23, 0x02, 0x46, 0x00, 0x00, 0xEE,
    0x80, 0x60, 0x23, 0x02, 0x47, 0x00, 0x00, 0xEE, 0x80, 0x70, 0x23, 0x02,
    0x48, 0x00, 0x00, 0xEE, 0x80, 0x80, 0x23, 0x02, 0x49, 0x00, 0x00, 0xEE,
    0x80, 0x90, 0x23, 0x02, 0x4A, 0x00, 0x00, 0xEE, 0x80, 0xA0, 0x23, 0x02,
    0x4B, 0x00, 0x00, 0xEE, 0x80, 0xB0, 0x23, 0x02, 0x4C, 0x00, 0x00, 0xEE,
    0x80, 0xC0, 0x23, 0x02, 0x00, 0xEE, 0xA4, 0x27, 0xF0, 0x1E, 0xDD, 0xE4,
    0x7D, 0x04, 0x00, 0xEE, 0x00, 0xE0, 0xA1, 0xFF, 0xF0, 0x65, 0x40, 0x01,
    0x13, 0x54, 0x40, 0x02, 0x13, 0x58, 0x40, 0x03, 0x13, 0xBE, 0x6D, 0x0A,
    0x6E, 0x02, 0xA4, 0xD3, 0x22, 0x9C, 0x6D, 0x08, 0x6E, 0x0A, 0xA4, 0xDF,
    0x22, 0x9C, 0x6D, 0x08, 0x6E, 0x0F, 0xA4, 0xEB, 0x22, 0x9C, 0x6D, 0x08,
    0x6E, 0x14, 0xA4, 0xF5, 0x22, 0x9C, 0x6A, 0x32, 0x6B, 0x1B, 0xA5, 0x89,
    0xDA, 0xB4, 0x6A, 0x3A, 0xA5, 0x8D, 0xDA, 0xB4, 0x60, 0xA4, 0x61, 0xC7,
    0x62, 0x02, 0x12, 0x10, 0x61, 0x9E, 0x13, 0x5A, 0x61, 0xA1, 0x60, 0xEE,
    0xA3, 0x9E, 0xF1, 0x55, 0x00, 0xE0, 0xA5, 0x33, 0xFF, 0x65, 0xA4, 0x12,
    0xFF, 0x55, 0x6D, 0x12, 0x6E, 0x03, 0xA5, 0x43, 0x22, 0x9C, 0x6D, 0x12,
    0x6E, 0x0A, 0xA5, 0x4B, 0x22, 0x9C, 0x6D, 0x12, 0x6E, 0x11, 0xA5, 0x53,
    0x22, 0x9C, 0x6D, 0x12, 0x6E, 0x18, 0xA5, 0x5B, 0x22, 0x9C, 0x6E, 0x00,
    0x23, 0x96, 0x7E, 0x01, 0x4E, 0x10, 0x6E, 0x00, 0x13, 0x8C, 0xA4, 0x12,
    0xFE, 0x1E, 0xF0, 0x65, 0x62, 0x01, 0xEE, 0xA1, 0x62, 0x00, 0x90, 0x20,
    0x13, 0xBC, 0x80, 0xE0, 0x80, 0x0E, 0xA5, 0x63, 0xF0, 0x1E, 0xF1, 0x65,
    0xA5, 0x83, 0xD0, 0x16, 0xA4, 0x12, 0xFE, 0x1E, 0x80, 0x20, 0xF0, 0x55,
    0x00, 0xEE, 0x00, 0xE0, 0x6D, 0x06, 0x6E, 0x0D, 0xA5, 0x03, 0x22, 0x9C,
    0x60, 0x03, 0xF0, 0x15, 0xF0, 0x0A, 0xF1, 0x07, 0x31, 0x00, 0x13, 0xF2,
    0xE0, 0xA1, 0x13, 0xF8, 0x00, 0xE0, 0xA4, 0x25, 0x60, 0x1E, 0x61, 0x09,
    0xD0, 0x13, 0x6D, 0x10, 0x6E, 0x11, 0xA5, 0x11, 0x22, 0x9C, 0x22, 0x02,
    0xF0, 0x0A, 0x22, 0x02, 0x13, 0x0C, 0x6D, 0x0A, 0xA5, 0x1A, 0x13, 0xFC,
    0x6D, 0x08, 0xA5, 0x26, 0x00, 0xE0, 0x6E, 0x11, 0x22, 0x9C, 0xA4, 0x28,
    0x60, 0x1E, 0x61, 0x09, 0xD0, 0x13, 0x22, 0x02, 0xF0, 0x0A, 0x22, 0x02,
    0x13, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xA0, 0xC0, 0x80,
    0xA0, 0x40, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0xC0, 0x40, 0x40, 0xE0, 0xE0,
    0x20, 0xC0, 0xE0, 0xE0, 0x60, 0x20, 0xE0, 0xA0, 0xE0, 0x20, 0x20, 0xE0,
    0xC0, 0x20, 0xC0, 0xE0, 0x80, 0xE0, 0xE0, 0xE0, 0x20, 0x20, 0x20, 0xE0,
    0xE0, 0xA0, 0xE0, 0xE0, 0xE0, 0x20, 0xE0, 0x40, 0xA0, 0xE0, 0xA0, 0xC0,
    0xE0, 0xA0, 0xE0, 0xE0, 0x80, 0x80, 0xE0, 0xC0, 0xA0, 0xA0, 0xC0, 0xE0,
    0xC0, 0x80, 0xE0, 0xE0, 0x80, 0xC0, 0x80, 0x60, 0x80, 0xA0, 0x60, 0xA0,
    0xE0, 0xA0, 0xA0, 0xE0, 0x40, 0x40, 0xE0, 0x60, 0x20, 0x20, 0xC0, 0xA0,
    0xC0, 0xA0, 0xA0, 0x80, 0x80, 0x80, 0xE0, 0xE0, 0xE0, 0xA0, 0xA0, 0xC0,
    0xA0, 0xA0, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0xC0, 0xA0, 0xC0, 0x80, 0x40,
    0xA0, 0xE0, 0x60, 0xC0, 0xA0, 0xC0, 0xA0, 0x60, 0xC0, 0x20, 0xC0, 0xE0,
    0x40, 0x40, 0x40, 0xA0, 0xA0, 0xA0, 0x60, 0xA0, 0xA0, 0xA0, 0x40, 0xA0,
    0xA0, 0xE0, 0xE0, 0xA0, 0x40, 0xA0, 0xA0, 0xA0, 0xA0, 0x40, 0x40, 0xE0,
    0x60, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x04, 0x0B, 0x03, 0x54, 0x04, 0x10, 0x03, 0x58, 0x04,
    0x15, 0x03, 0xBE, 0x68, 0x4C, 0x34, 0x54, 0x94, 0x64, 0x68, 0x34, 0x64,
    0x38, 0x3C, 0x00, 0x08, 0x94, 0x3C, 0x88, 0x28, 0x3C, 0x94, 0x38, 0x64,
    0x84, 0x60, 0x00, 0x0C, 0x94, 0x3C, 0x88, 0x2C, 0x08, 0x94, 0x7C, 0x68,
    0x00, 0x10, 0x94, 0x40, 0x88, 0x04, 0x2C, 0x94, 0x44, 0x3C, 0x78, 0x54,
    0x3C, 0x8C, 0x00, 0x68, 0x70, 0x3C, 0x74, 0x74, 0x94, 0x2C, 0x60, 0x8C,
    0x94, 0x54, 0x3C, 0x8C, 0x00, 0x2C, 0x58, 0x58, 0x94, 0x44, 0x64, 0x64,
    0x38, 0x00, 0x60, 0x64, 0x78, 0x94, 0x48, 0x2C, 0x58, 0x78, 0x4C, 0x60,
    0x44, 0x00, 0x60, 0x64, 0x78, 0x94, 0x70, 0x3C, 0x58, 0x3C, 0x2C, 0x74,
    0x3C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x94, 0x0C, 0x94, 0x10,
    0x94, 0x34, 0x00, 0x14, 0x94, 0x18, 0x94, 0x1C, 0x94, 0x38, 0x00, 0x20,
    0x94, 0x24, 0x94, 0x28, 0x94, 0x3C, 0x00, 0x2C, 0x94, 0x04, 0x94, 0x30,
    0x94, 0x40, 0x00, 0x18, 0x17, 0x10, 0x02, 0x18, 0x02, 0x20, 0x02, 0x10,
    0x09, 0x18, 0x09, 0x20, 0x09, 0x10, 0x10, 0x18, 0x10, 0x20, 0x10, 0x10,
    0x17, 0x20, 0x17, 0x28, 0x02, 0x28, 0x09, 0x28, 0x10, 0x28, 0x17, 0xFE,
    0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x0A, 0xAE, 0xA2, 0x42, 0x38, 0x08, 0x30,
    0xB8
];










const programOffset = 0x200;
// load the data into memory
for (let j = 0; j < data.length; j++) {
    memory[programOffset + j] = data[j];
}

// timer registers
let delayTimer = 0;
let soundTimer = 0;

// timer loop
timer.background(function() {
    while (true) {
        // delay for 1/60 of a second 
        pause(16.67)
        console.log("hi")
        if (delayTimer > 0) {
            delayTimer -= 1;
        }
        if (soundTimer > 0) {
            soundTimer -= 1;
        }
    }
})

// set the screen image to a blank image
let screenImage = image.create(64, 32);
screenImage.fillRect(0, 0, 64, 32, 15);

let rt = 0
game.onUpdateInterval(500, function() {
    console.log('hi')
})
game.pushScene()

forever(function() {
    scene.setBackgroundImage(screenImage);
})

let lastTime = game.runtime()
let cycleCount = 0
// main loop
timer.background(function() {
    while (true) {
        cycleCount += 1
        if (cycleCount == 1000) {
            pause(0)
            cycleCount = 0
        }
        // if (game.runtime() - lastTime > 16) {
        //     lastTime = game.runtime()
        //     if (delayTimer > 0) {
        //         delayTimer -= 1
        //     }
        //     if (soundTimer > 0) {
        //         soundTimer -= 1
        //     }
        // }

        // fetch
        let currentIntructionA = memory[pc];
        let currentInstructionB = memory[pc + 1];
        let currentInstruction = currentIntructionA << 8 | currentInstructionB;

        pc += 2

        // decode
        // the opcode is the first 4 bytes (nybble)
        let opcode = (currentInstruction >> 12) & 0xF;
        let n2 = (currentInstruction >> 8) & 0xF;
        let n3 = (currentInstruction >> 4) & 0xF;
        let n4 = currentInstruction & 0xf;

        let x = n2;
        let y = n3;
        let n = n4;
        let nn = (n3 << 4) | n4;
        let nnn = ((n2 << 8) | (n3 << 4) | n4);
        // execute

        switch (opcode) {
            case 0x0:
                if (currentInstruction === 0x00E0) {
                    // clear screen
                    screenImage.fillRect(0, 0, 64, 32, 15);
                    pause(1)
                } else if (currentInstruction == 0x00EE) {
                    // return from subroutine
                    // set pc to pop from stack
                    pc = stack.pop();
                }
                break;
            case 0x1:
                // jump to nnn
                pc = nnn;
                break;
            case 0x6:
                // set vx to nn
                v[x] = nn;
                break;
            case 0x7:
                // add nn to vx
                v[x] = v[x] + nn
                break;
            case 0xA:
                // set index register to nnn
                i = nnn;
                break;
            case 0xD:
                let xCoord = v[x];
                let yCoord = v[y];

                // Early out if sprite would be fully off-screen
                if (xCoord >= 64 || yCoord >= 32) return;

                // Set VF to 0
                v[0xF] = 0;

                // Draw sprite row by row
                for (let row = 0; row < n; row++) {
                    if (yCoord + row >= 32) break;

                    let spriteByte = memory[i + row];

                    for (let bit = 0; bit < 8; bit++) {
                        if (xCoord + bit >= 64) break;

                        let spritePixel = (spriteByte >> (7 - bit)) & 1;
                        if (spritePixel == 1) {
                            let px = xCoord + bit;
                            let py = yCoord + row;
                            let currentPixel = screenImage.getPixel(px, py)
                            if (currentPixel != 1) {
                                currentPixel = 0
                            } else {
                                currentPixel = 1
                            }
                            let newPixel = currentPixel ^ 1
                            if (currentPixel == 1 && newPixel == 0) {
                                v[0xf] = 1
                            }

                            if (newPixel) {
                                screenImage.setPixel(px, py, 1)
                            } else {
                                screenImage.setPixel(px, py, 15)
                            }
                            cycleCount = 999
                        }
                    }
                }

                break;
            case 0x2:
                // subroutine
                // add pc to stack then set pc to nnn
                stack.push(pc);
                pc = nnn;
                break;
            case 0x3:
                // skip conditionally
                // skip 1 instruction if vx == nn
                if (v[x] == nn) {
                    pc += 2;
                }
                break;
            case 0x4:
                // skip conditionally
                // skip 1 instruction if vx != nn
                if (v[x] != nn) {
                    pc += 2;
                }
                break;
            case 0x5:
                // skip conditionally
                // skip 1 instruction if vx == vy
                if (v[x] == v[y]) {
                    pc += 2;
                }
                break;
            case 0x9:
                // skip conditionally
                // skip 1 instruction if vx != vy
                if (v[x] != v[y]) {
                    pc += 2;
                }
                break;
            case 0x8:
                if (n4 == 0x0) {
                    // set vx to vy
                    v[x] = v[y]
                } else if (n4 == 0x1) {
                    // binary or
                    // set vx to the OR of vx and vy
                    v[x] = v[x] | v[y]
                } else if (n4 == 0x2) {
                    // binary and
                    // set vx to the AND of vx and vy
                    v[x] = v[x] & v[y]
                } else if (n4 == 0x3) {
                    // binary xor
                    // set vx to the XOR of vx and vy
                    v[x] = v[x] ^ v[y]
                } else if (n4 == 0x4) {
                    // add
                    // set vx to vx + vy
                    let result = v[x] + v[y]
                    if (result > 255) {
                        v[0xf] = 1
                    } else {
                        v[0xf] = 0
                    }
                    v[x] = result & 0xFF
                } else if (n4 == 0x5) {
                    // subtract
                    // set vx to vx - vy
                    let result = v[x] - v[y]
                    if (result < 0) { // handle underflow
                        v[x] = result & 0xFF
                        v[0xf] = 0
                    } else {
                        v[x] = result
                        v[0xf] = 1
                    }
                } else if (n4 == 0x7) {
                    // subtract
                    // set vx to vy - vx
                    let result = v[y] - v[x]
                    if (result < 0) { // handle underflow
                        v[x] = result & 0xFF
                        v[0xf] = 0
                    } else {
                        v[x] = result
                        v[0xf] = 1
                    }
                } else if (n4 == 0x6) {
                    // shift right
                    v[x] >> 1
                } else if (n4 == 0xE) {
                    // shift left
                    v[x] << 1
                }
                break;
            case 0xB:
                // jump with offset
                pc = nnn + v[0x0]
                break;
            case 0xC:
                // random
                v[x] = randint(0, 255) & nn
                break;
            case 0xE:
                // skip if key
                if (n3 == 0x9 && n4 == 0xE) {
                    // jump if the key is pressed
                    if (checkIfKeyPressed(x)) {
                        pc += 2
                    }
                } else if (n3 == 0xA && n4 == 0x1) {
                    // jump if the key is not pressed
                    if (!checkIfKeyPressed(x)) {
                        pc += 2
                    }
                }
                
                break;
            case 0xF:
                if (n3 == 0x0 && n4 == 0x7) {
                    v[x] = delayTimer
                } else if (n3 == 0x1 && n4 == 0x5) {
                    delayTimer = v[x]
                } else if (n3 == 0x1 && n4 == 0x8) {
                    soundTimer = v[x]
                } else if (n3 == 0x1 && n4 == 0xE) {
                    // add to index
                    i += v[x]
                    if (i > 0x0FFF) {
                        v[0xf] = 1
                    } else {
                        v[0xf] = 0
                    };
                } else if (n3 == 0x0 && n4 == 0xA) {
                    // get key
                    let pressedKey = getPressedKeys()
                    if (pressedKey) {
                        v[x] = pressedKey
                    } else {
                        pc -= 2
                    } 
                } else if (n3 == 0x2 && n4 == 0x9) {
                    // font character
                    i = fontOffset + (v[x] & 0x0F) * 5
                } else if ( n3 == 0x3 && n4 == 0x3) {
                    // binary coded decimal conversion
                    let hundreds = Math.floor(v[x] / 100)
                    let tens = Math.floor((v[x] % 100) / 10)
                    let ones = Math.floor(v[x] % 10)

                    memory[i] = hundreds
                    memory[i+1] = tens
                    memory[i+2] = ones
                } else if (n3 == 0x5 && n4 == 0x5) {
                    // write to memory
                    for (let j = 0; j <= x; j++) {
                        memory[i + j] = v[j];
                    }
                } else if (n3 == 0x6 && n4 == 0x5) {
                    // read from memory
                    for (let j = 0; j <= x; j++) {
                        v[j] = memory[i + j];
                    }
                }
                break;
        }       
    }
})

function checkIfKeyPressed(key: number) {
    switch (key) {
        case 0x0:
            return browserEvents.X.isPressed()
            break;
        case 0x1:
            return browserEvents.One.isPressed()
            break;
        case 0x2:
            return browserEvents.Two.isPressed()
            break;
        case 0x3:
            return browserEvents.Three.isPressed()
            break;
        case 0x4:
            if (browserEvents.Q.isPressed()) {
                console.log("Q!")
            }
            return browserEvents.Q.isPressed()
            break;
        case 0x5:
            return browserEvents.W.isPressed()
            break;
        case 0x6:
            return browserEvents.E.isPressed()
            break;
        case 0x7:
            return browserEvents.A.isPressed()
            break;
        case 0x8:
            return browserEvents.S.isPressed()
            break;
        case 0x9:
            return browserEvents.D.isPressed()
            break;
        case 0xA:
            return browserEvents.Z.isPressed()
            break;
        case 0xB:
            return browserEvents.C.isPressed()
            break;
        case 0xC:
            return browserEvents.Four.isPressed()
            break;
        case 0xD:
            return browserEvents.R.isPressed()
            break;
        case 0xE:
            return browserEvents.F.isPressed()
            break;
        case 0xF:
            return browserEvents.V.isPressed()
            break;

    }
    return false
}

function getPressedKeys() {
    if (browserEvents.X.isPressed()) { return 0x0; }
    if (browserEvents.One.isPressed()) { return 0x1; }
    if (browserEvents.Two.isPressed()) { return 0x2; }
    if (browserEvents.Three.isPressed()) { return 0x3; }
    if (browserEvents.Q.isPressed()) { return 0x4; }
    if (browserEvents.W.isPressed()) { return 0x5; }
    if (browserEvents.E.isPressed()) { return 0x6; }
    if (browserEvents.A.isPressed()) { return 0x7; }
    if (browserEvents.S.isPressed()) { return 0x8; }
    if (browserEvents.D.isPressed()) { return 0x9; }
    if (browserEvents.Z.isPressed()) { return 0xA; }
    if (browserEvents.C.isPressed()) { return 0xB; }
    if (browserEvents.Four.isPressed()) { return 0xC; }
    if (browserEvents.R.isPressed()) { return 0xD; }
    if (browserEvents.F.isPressed()) { return 0xE; }
    if (browserEvents.V.isPressed()) { return 0xF; }

    return null;
}
